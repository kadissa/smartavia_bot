import logging
import os

from aiogram import F, Dispatcher, Bot
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message
from dotenv import load_dotenv

from smartavia_parser import *

load_dotenv()
button1 = KeyboardButton(text='–°–æ—á–∏-–°–ü–ë')
button2 = KeyboardButton(text='–°–ü–ë-–°–æ—á–∏')
button3 = KeyboardButton(text='–Ω–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã')
btn_1 = KeyboardButton(text='–ö–Ω–æ–ø–∫–∞ 1')
btn_2 = KeyboardButton(text='–ö–Ω–æ–ø–∫–∞ 2')
btn_3 = KeyboardButton(text='–ö–Ω–æ–ø–∫–∞ 3')

keyboard = ReplyKeyboardMarkup(
    keyboard=[[button1, button2], ],
    resize_keyboard=True,
    input_field_placeholder='–¥–¥–º–º',
    one_time_keyboard=True)

bot = Bot(token=os.getenv('TELEGRAM_TOKEN_TRAINING_BOT'))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
passengers_dict = {}


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(text='Welcome to smartavia bot\n –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                              '–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ',
                         reply_markup=keyboard)


@dp.message(F.text == '–°–æ—á–∏-–°–ü–ë')
@dp.message(F.text == '–°–ü–ë-–°–æ—á–∏')
async def get_flight_data(message: Message):
    passengers_dict[message.from_user.id] = message.text
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞: üõ´Ô∏è\n—á–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü',
                         reply_markup=keyboard)


# @dp.message(lambda message: message.text.isdigit(), F.text.len() == 4)
@dp.message(F.text.regexp(r'\d\d\W\d\d'))
@dp.message(F.text.regexp(r'\d\d\d\d'))
async def send_flights(message: Message):
    date = message.text
    if len(date) == 5:
        date = date[:2] + date[3:]
    dep_air = passengers_dict.get(message.from_user.id).split('-')[0]
    arrive_air = passengers_dict.get(message.from_user.id).split('-')[1]
    direction = (f'‚úàÔ∏è    üåÜÔ∏è{dep_air}-{arrive_air}üèùÔ∏è\n' if arrive_air == '–°–æ—á–∏'
                 else f'‚úàÔ∏è    üèùÔ∏è{dep_air}-{arrive_air}üåÜÔ∏è\n')
    await message.answer(
        text=get_5_days_flights(get_driver(date, dep_air, arrive_air),
                                get_soup(
                                    get_driver(date, dep_air, arrive_air)),
                                direction
                                ),
        reply_markup=keyboard)


@dp.message()
async def send_flights(message: Message):
    await message.answer(text='–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2506, –≥–¥–µ 25 - '
                              '—ç—Ç–æ –¥–µ–Ω—å, 06 - —ç—Ç–æ –º–µ—Å—è—Ü‚ùóÔ∏è',
                         reply_markup=keyboard)


if __name__ == '__main__':
    dp.run_polling(bot)
