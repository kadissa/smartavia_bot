import os
from aiogram import F, Dispatcher, Bot
from aiogram.filters import CommandStart
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, Message
from dotenv import load_dotenv

from smartavia_parser import *

load_dotenv()
button1 = KeyboardButton(text='–°–æ—á–∏ –°–ü–ë')
button2 = KeyboardButton(text='–°–ü–ë –°–æ—á–∏')
button3 = KeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
button_aeroflot = KeyboardButton(text='–ê—ç—Ä–æ—Ñ–ª–æ—Ç')
button_smartavia = KeyboardButton(text='–°–º–∞—Ä—Ç–∞–≤–∏–∞')

keyboard_date = ReplyKeyboardMarkup(
    keyboard=[[button1, button2],
              [button3],
              [button_smartavia, button_aeroflot]],
    resize_keyboard=True,
    input_field_placeholder='–¥–¥–º–º',
    one_time_keyboard=True)
keyboard_direction = ReplyKeyboardMarkup(
    keyboard=[[button1, button2],
              [button3],
              [button_smartavia, button_aeroflot]],
    resize_keyboard=True,
    input_field_placeholder='–º–æ—Å–∫–≤–∞ –º–∏–Ω—Å–∫',
    one_time_keyboard=True)

bot = Bot(token=os.getenv('TELEGRAM_TOKEN_TRAINING_BOT'))
dp = Dispatcher()

passengers_dict = {}


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(text='Welcome to smartavia bot\n –ü–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                              '–∫–Ω–æ–ø–∫–∞–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ',
                         reply_markup=keyboard_date
                         )


@dp.message(F.text == '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
async def request_direction(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '
                         '—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é.',
                         reply_markup=keyboard_direction)


@dp.message(F.text == '–ê—ç—Ä–æ—Ñ–ª–æ—Ç')
@dp.message(F.text == '–°–º–∞—Ä—Ç–∞–≤–∏–∞')
async def get_air_company(message: Message):
    passengers_dict[message.from_user.username] = message.text
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è '
                         '—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é.',
                         reply_markup=keyboard_direction)


@dp.message(F.text.regexp(r'[–ê-–Ø–∞-—è–Å—ë-]+ [–ê-–Ø–∞-—è–Å—ë-]+'))
@dp.message(F.text == '–°–æ—á–∏ –°–ü–ë')
@dp.message(F.text == '–°–ü–ë –°–æ—á–∏')
async def get_flight_data(message: Message):
    if not all(city.title() in AIRPORT_CODES for city in message.text.split()):
        for city in message.text.split():
            if city.title() not in AIRPORT_CODES:
                logger.warning(f'–í –≥–æ—Ä–æ–¥–µ {city} –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, '
                               f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
                await message.answer(f'–í –≥–æ—Ä–æ–¥–µ {city} –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞, '
                                     f'–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.',
                                     reply_markup=keyboard_direction)
    else:
        passengers_dict[message.from_user.id] = message.text
        await message.answer('–≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞: üõ´Ô∏è\n—á–∏—Å–ª–æ –∏ –º–µ—Å—è—Ü',
                             reply_markup=keyboard_date)


@dp.message(F.text.regexp(r'(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[012])'))
@dp.message(F.text.regexp(r'(0[1-9]|[12][0-9]|3[01])\W(0[1-9]|1[012])'))
async def send_flights(message: Message):
    date = message.text
    if len(date) == 5:
        date = date[:2] + date[3:]
    if passengers_dict.get(message.from_user.id) is None:
        logger.warning('–Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. return')
        return await message.answer('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
    dep_air = passengers_dict.get(message.from_user.id).split()[0].title()
    arrive_air = passengers_dict.get(message.from_user.id).split()[1].title()
    if arrive_air == '–°–æ—á–∏':
        direction = f'‚úàÔ∏è    üåÜÔ∏è{dep_air}-{arrive_air}üèùÔ∏è\n'
    elif dep_air == '–°–æ—á–∏':
        direction = f'‚úàÔ∏è    üèùÔ∏è{dep_air}-{arrive_air}üåÜÔ∏è\n'
    else:
        direction = f'‚úàÔ∏è    {dep_air}-{arrive_air}\n'
    if passengers_dict.get(message.from_user.username) == '–ê—ç—Ä–æ—Ñ–ª–æ—Ç':
        url = AEROFLOT_URL
        current_date = str(datetime.date.today().year) + date[2:] + date[:2]
        await message.answer(
            # text=seven_days_aeroflot(url, current_date, dep_air, arrive_air)
            text=one_day_aeroflot(url, current_date, dep_air, arrive_air)
        )
    else:
        url = SMARTAVIA_URL
        await message.answer(
            text=five_days_smartavia(url, date, dep_air, arrive_air,direction),
            reply_markup=keyboard_date
        )


@dp.message(F.text.regexp(r'\d'))
@dp.message(F.text.regexp(r'\W\d'))
async def send_flights(message: Message):
    logger.warning(f'–≤–≤–µ–¥–µ–Ω–∞ no correct –¥–∞—Ç–∞: {message.text}')
    await message.answer(text='–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 2506, –≥–¥–µ 25 - '
                              '—ç—Ç–æ –¥–µ–Ω—å, 06 - —ç—Ç–æ –º–µ—Å—è—Ü‚ùóÔ∏è',
                         reply_markup=keyboard_date)


@dp.message(F.text.regexp(r'[a-zA-Z]'))
async def send_flights(message: Message):
    logger.warning(f'–≤–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç: {message.text}')
    await message.answer(text='–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã‚ùóÔ∏è',
                         reply_markup=keyboard_direction)


if __name__ == '__main__':
    dp.run_polling(bot)
